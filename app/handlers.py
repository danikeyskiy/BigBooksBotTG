from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, BufferedInputFile
from aiogram.filters import CommandStart
from peewee import DoesNotExist

import app.keyboards as kb
from app.database.models import UserInfo, Book
from app.database.requests import *
from backup import create_backup
from app.exporters import *

router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message):
    try:
        user = UserInfo.get(tg_id=message.from_user.id)
        if user.role == 'admin':
            await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n' 
                                 '–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?', 
                                 reply_markup=kb.admin)
        else:
            await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üìö\n' 
                                 '–Ø ‚Äî –≤–∞—à –∫–Ω–∏–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫! –ü–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ª—é–±—É—é –∫–Ω–∏–≥—É: –∫–ª–∞—Å—Å–∏–∫—É, –±–µ—Å—Ç—Å–µ–ª–ª–µ—Ä—ã, '
                                 '–Ω–∞—É—á–Ω—É—é –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É –∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –∏ –Ω–µ–æ–±—ã—á–Ω–æ–µ. ' 
                                 '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏, –∏ —è –Ω–∞–π–¥—É –µ—ë –¥–ª—è –≤–∞—Å.\n' 
                                 '–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫–∏? üîçüìñ', reply_markup=kb.main)

    except DoesNotExist:
        UserInfo.create(
            tg_id=message.from_user.id,
            username=message.from_user.username,
            role='user'
        )
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üìö\n' 
                             '–Ø –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –ª—é–±—É—é –∫–Ω–∏–≥—É. ' 
                             '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏, –∏ —è –Ω–∞–π–¥—É –µ—ë –¥–ª—è –≤–∞—Å.\n' 
                             '–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫–∏? üîçüìñ', reply_markup=kb.main)

@router.message(F.text == '–ù–∞–π—Ç–∏ –∫–Ω–∏–≥—É')
async def search(message: Message):
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏')

@router.message(F.text == '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–Ω–∏–≥—É')
async def suggestion(message: Message):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    
@router.message(F.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
async def check_suggestion(message: Message):
    user = UserInfo.get(tg_id=message.from_user.id)
    if user.role != 'admin':
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã')
        return
    
    suggestions = Suggestions.select().order_by(Suggestions.suggestion_date)
    
    response = '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n'
    buttons = []
    for suggestion in suggestions:
        user = suggestion.user_id
        response += (f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {suggestion.id}:\n"
                     f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username}\n"
                     f"–î–∞—Ç–∞: {suggestion.suggestion_date}\n"
                     f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {suggestion.suggestion_text}\n\n")
        buttons.append([InlineKeyboardButton(
            text=f"[{suggestion.id}] –î–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ",
            callback_data=f"delete_suggestion:{suggestion.id}"
        )])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)   
    await message.answer(response, reply_markup=keyboard)
    
@router.message(F.text == '–í—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î')
async def export_data(message: Message):
    user = UserInfo.get(tg_id=message.from_user.id)
    if user.role != 'admin':
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã')
        return

    models = {
        "Users": UserInfo,
        "Books": Book,
        "Downloads": Downloads,
        "Suggestions": Suggestions
    }

    docx_file_path = export_to_docx(models)
    xlsx_file_path = export_to_xlsx(models)
    
    docx_file_path = export_to_docx(models)
    await message.answer_document(
        BufferedInputFile.from_file(docx_file_path, filename="database_export.docx"),
        caption="–î–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DOCX"
    )

    await message.answer_document(
        BufferedInputFile.from_file(xlsx_file_path, filename="database_export.xlsx"),
        caption="–î–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XLSX"
    )

    os.remove(docx_file_path)
    os.remove(xlsx_file_path)

@router.message(F.text == '–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é')
async def upload_backup(message: Message):
    await create_backup()
    await message.answer("–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É –≤ –ë–î')
async def add_book_through_tg(message: Message):
    user = UserInfo.get(tg_id=message.from_user.id)
    if user.role != 'admin':
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã')
        return

    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–Ω–∏–≥–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
                         '–ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | –ê–≤—Ç–æ—Ä | –ì–æ–¥ | –ñ–∞–Ω—Ä | –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ\n–ü—Ä–∏–º–µ—Ä:\n'
                         '–í–æ–π–Ω–∞ –∏ –º–∏—Ä | –û–ø–∏—Å–∞–Ω–∏–µ | –õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π | 1869 –≥–æ–¥. | –†–æ–º–∞–Ω | https://qwerty.com')
    
@router.message()
async def search_book(message: Message):
    if (message.reply_to_message and 
        '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ' in message.reply_to_message.text.lower()):
        Suggestions.create(
        user_id=UserInfo.get(tg_id=message.from_user.id),
        suggestion_text=message.text.strip(),
        )
        await message.answer(
        '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! üìï\n'
        '–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–≥–æ –∏ –¥–æ–±–∞–≤–∏–º –∫–Ω–∏–≥—É, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ')
    elif (message.reply_to_message and 
        '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–Ω–∏–≥–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:' in message.reply_to_message.text.lower()):
        user = UserInfo.get(tg_id=message.from_user.id)
        if user.role != 'admin':
            return
        
        parts = [part.strip() for part in message.text.split('|')]
        if len(parts) != 6:
            await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –≤—Å–µ 6 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤')
            return
        
        name, description, author, year, genre, download_link = parts
        Book.create(name=name, description=description, author=author, year=year, genre=genre, download_link=download_link)
        
        await message.answer('–ö–Ω–∏–≥–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
    
    else:
        query = message.text.strip()

        books = Book.select().where(fn.LOWER(Book.name).contains(query.lower()))

        if not books:
            await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. '
                                 '–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –µ—ë')

        buttons = []
        if len(books) > 1:
            for book in books:
                button = InlineKeyboardButton(
                    text=book.name,
                    callback_data=f"select_book:{book.id}"
                )
                buttons.append([button])
                keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await message.answer('–Ø –Ω–∞—à—ë–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–Ω–∏–≥ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∏–∑ —Å–ø–∏—Å–∫–∞:',
                                 reply_markup=keyboard)
        else:
            book = books[0]
            await send_book_info(message, book)

@router.callback_query()
async def select_book(callback_query: CallbackQuery):
    if callback_query.data.startswith("select_book:"):
        book_id = int(callback_query.data.split(":")[1])
        book = Book.get(id=book_id)
        await send_book_info(callback_query.message, book)
        await callback_query.answer()
    
    elif callback_query.data.startswith("delete_suggestion:"):
        suggestion_id = int(callback_query.data.split(":")[1])
        suggestion = Suggestions.get(id=suggestion_id)
        suggestion.delete_instance()
        await callback_query.message.answer(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {suggestion_id} –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ \n")
        await callback_query.answer()